#version 450
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
//#extension GL_NV_shader_atomic_float : enable // support for floats in atomicAdd

layout (local_size_x = 2, local_size_y = 2, local_size_z = 1) in;

shared uint max;
uint test;
uniform int columnsCount;

layout(binding = 0) buffer Input {
	uint elements[];
} input_data;

layout(binding = 1) buffer Output {
	uint elements[];
	// musí být jednorozměrné, aby si to domyslelo velikost
	// dvourozměrné vyžaduje zadat jeden rozměr, ten se ale mění a on nebere nekonstantní proměnné (uniform size)
} output_data;


void main () {
    //memoryBarrierShared();
    //barrier();
    //memoryBarrier();

    uint index = gl_GlobalInvocationID.x * columnsCount + gl_GlobalInvocationID.y;
    uint value = input_data.elements[index];
    //test = atomicAdd(sum, 1);
    //sum = sum + 1;
    test = atomicMax(max, value);
    barrier();
    output_data.elements[index] = max; //test;
 }
